// <auto-generated />
using System;
using BibliotecaP.Models.dbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaP.Migrations
{
    [DbContext(typeof(BibliotecaContext))]
    [Migration("20240522202956_MakeQrCodeFieldsNullable")]
    partial class MakeQrCodeFieldsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaP.Models.dbModels.AplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RolId")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("RolID");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Aviso", b =>
                {
                    b.Property<int>("AvisosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AvisosID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvisosId"));

                    b.Property<string>("Descripcin")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Imagen")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("AvisosId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Avisos");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Cubiculo", b =>
                {
                    b.Property<int>("CubiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CubiculoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CubiculoId"));

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CubiculoId")
                        .HasName("PK__Cubiculo__7607D6432A33615A");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cubiculos");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.EstadoCubiculo", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EstadoId")
                        .HasName("PK__EstadoCu__FEF86B604EEAE8D8");

                    b.ToTable("EstadoCubiculos");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.EstadoMesa", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EstadoId")
                        .HasName("PK__EstadoMe__FEF86B600687573A");

                    b.ToTable("EstadoMesas");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Mesa", b =>
                {
                    b.Property<int>("MesaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MesaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MesaId"));

                    b.Property<int>("EstadoId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MesaId")
                        .HasName("PK__Mesas__6A4196C85BF6333E");

                    b.HasIndex("EstadoId");

                    b.ToTable("Mesas");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.ReservacionCubiculo", b =>
                {
                    b.Property<int>("ReservacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservacionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservacionId"));

                    b.Property<string>("AccesoQrBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CubiculoId")
                        .HasColumnType("int")
                        .HasColumnName("CubiculoID");

                    b.Property<DateTime>("FechaHoraFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaHoraInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("SalidaQrBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("ReservacionId")
                        .HasName("PK__Reservac__145B3EB530AA4DBE");

                    b.HasIndex("CubiculoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ReservacionCubiculos");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.ReservacionMesa", b =>
                {
                    b.Property<int>("ReservacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservacionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservacionId"));

                    b.Property<DateTime>("FechaHoraFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaHoraInicio")
                        .HasColumnType("datetime");

                    b.Property<int>("MesaId")
                        .HasColumnType("int")
                        .HasColumnName("MesaID");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("ReservacionId")
                        .HasName("PK__Reservac__145B3EB57A155FBF");

                    b.HasIndex("MesaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ReservacionMesas");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Reseña", b =>
                {
                    b.Property<int>("IdReseña")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReseña"));

                    b.Property<int?>("Calificacion")
                        .HasColumnType("int")
                        .HasColumnName("calificacion");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("IdReseña");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reseñas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Aviso", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", "Usuario")
                        .WithMany("Avisos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_Avisos_Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Cubiculo", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.EstadoCubiculo", "Estado")
                        .WithMany("Cubiculos")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK__Cubiculos__Estad__5441852A");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Mesa", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.EstadoMesa", "Estado")
                        .WithMany("Mesas")
                        .HasForeignKey("EstadoId")
                        .IsRequired()
                        .HasConstraintName("FK__Mesas__EstadoID__571DF1D5");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.ReservacionCubiculo", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.Cubiculo", "Cubiculo")
                        .WithMany("ReservacionCubiculos")
                        .HasForeignKey("CubiculoId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservacionCubiculos_Cubiculos");

                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", "Usuario")
                        .WithMany("ReservacionCubiculos")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservaci__Usuar__5CD6CB2B");

                    b.Navigation("Cubiculo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.ReservacionMesa", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.Mesa", "Mesa")
                        .WithMany("ReservacionMesas")
                        .HasForeignKey("MesaId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservacionMesas_Mesas");

                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", "Usuario")
                        .WithMany("ReservacionMesas")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservaci__Usuar__619B8048");

                    b.Navigation("Mesa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Reseña", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", "Usuario")
                        .WithMany("Reseñas")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_Reseñas_Usuarios");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BibliotecaP.Models.dbModels.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.AplicationUser", b =>
                {
                    b.Navigation("Avisos");

                    b.Navigation("ReservacionCubiculos");

                    b.Navigation("ReservacionMesas");

                    b.Navigation("Reseñas");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Cubiculo", b =>
                {
                    b.Navigation("ReservacionCubiculos");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.EstadoCubiculo", b =>
                {
                    b.Navigation("Cubiculos");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.EstadoMesa", b =>
                {
                    b.Navigation("Mesas");
                });

            modelBuilder.Entity("BibliotecaP.Models.dbModels.Mesa", b =>
                {
                    b.Navigation("ReservacionMesas");
                });
#pragma warning restore 612, 618
        }
    }
}
